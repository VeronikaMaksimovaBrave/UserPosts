{"version":3,"sources":["utils/queries.js","components/tableMain/config.js","components/tableHead/index.js","components/tableCellEmail/index.js","components/tableCellDefault/index.js","components/tableRow/index.js","components/tableMain/styles.js","components/tableMain/index.js","App.js","reportWebVitals.js","index.js"],"names":["getUsers","page","a","axios","get","getPosts","postID","columns","id","label","minWidth","align","TableHead","map","column","TableCell","style","TableCellEmail","row","scrollhandler","value","useState","setPostID","userPosts","setUserPosts","fetchingPost","setFetchingPost","useEffect","then","response","data","finally","countPosts","length","Tooltip","title","placement","onMouseEnter","TableCellDefault","TableRow","hover","role","tabIndex","rowRender","code","useStyles","makeStyles","root","width","maxWidth","margin","marginTop","container","maxHeight","TableMain","classes","users","setUsers","currentPage","setCurrentPage","fetching","setFetching","scrollHandler","prevState","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableBody","index","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31254da7.chunk.js","sourcesContent":["import axios from 'axios'\n\n\nexport  const  getUsers = async (page) => {\n    return await axios.get(`https://gorest.co.in/public-api/users?page=${page + 1}`)\n}\n\nexport const getPosts = async (postID) => {\n    return await axios.get(`https://gorest.co.in/public-api/posts?user_id=${postID}`)\n}\n\n","export const columns = [\n    { id: 'name', label: 'Name', minWidth: 150 },\n    { id: 'email', label: 'Email', minWidth: 200 },\n    {\n        id: 'gender',\n        label: 'Gender',\n        minWidth: 70,\n        align: 'right'\n    },\n    {\n        id: 'status',\n        label: 'Status',\n        minWidth: 100,\n        align: 'right'\n    },\n]","/* eslint-disable react/prop-types */\nimport React from \"react\"\nimport {\n    TableCell,\n    TableHead as THead,\n    TableRow,\n} from '@material-ui/core'\n\nconst TableHead = ({ columns }) => {\n    return (\n        <THead>\n            <TableRow>\n                {columns.map((column) => (\n                    <TableCell\n                        key={column.id}\n                        align={column.align}\n                        style={{ minWidth: column.minWidth }}\n                    >\n                        {column.label}\n                    </TableCell>\n                ))}\n            </TableRow>\n        </THead>\n    )\n}\n\nexport default TableHead","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react'\nimport { getPosts } from '../../utils/queries'\nimport {\n    TableCell as TCell,\n    Tooltip\n} from '@material-ui/core'\n\nconst TableCellEmail = ({\n    column,\n    row,\n    scrollhandler,\n    value\n}) => {\n\n    const [postID, setPostID] = useState(0)\n    const [userPosts, setUserPosts] = useState([])\n    const [fetchingPost, setFetchingPost] = useState(true)\n\n    useEffect(() => {\n        if (fetchingPost) {\n            getPosts(postID)\n                .then(response => {\n                    setUserPosts(response.data.data)\n                })\n                .finally(() => setFetchingPost(false))\n        }\n    }, [fetchingPost])\n\n    const showUserPosts = (id) => {\n        setPostID(id)\n        setFetchingPost(true)\n    }\n\n    const countPosts = userPosts.length ?? '0'\n\n    return (\n        <Tooltip title={countPosts} key={column.id} placement='right'>\n            <TCell\n                key={column.id}\n                align={column.align}\n                onMouseEnter={() => {\n                    showUserPosts(row.id)\n                    scrollhandler(row.id)\n                }}\n            >\n                {value}\n            </TCell>\n        </Tooltip>\n    )\n}\n\nexport default TableCellEmail","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport {\n    TableCell as TCell\n} from '@material-ui/core'\n\nconst TableCellDefault = ({\n    column,\n    row,\n    scrollhandler,\n    value\n}) => {\n    return (\n        <TCell\n            key={column.id}\n            align={column.align}\n            onMouseEnter={() => {\n                scrollhandler(row.id)\n            }}\n        >\n            {value}\n        </TCell>\n    )\n}\n\nexport default TableCellDefault","/* eslint-disable react/prop-types */\nimport TableCellEmail from '../tableCellEmail/index'\nimport TableCellDefault from '../tableCellDefault/index'\n\nimport React from \"react\"\nimport {\n    TableRow as TRow\n} from '@material-ui/core'\n\nconst TableRow = ({\n    columns,\n    row,\n    scrollhandler,\n}) => {\n\n    const rowRender = (column, value) => {\n        if (column.id === 'email') {\n            return (\n                <TableCellEmail\n                    key={column.id}\n                    column={column}\n                    row={row}\n                    scrollhandler={(id) => scrollhandler(id)}\n                    value={value}\n                />\n            )\n        }\n        else return (\n            <TableCellDefault\n                key={column.id}\n                column={column}\n                row={row}\n                scrollhandler={(id) => scrollhandler(id)}\n                value={value}\n            />\n        )\n    }\n\n    return (\n        <TRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n            {columns.map((column) => {\n                const value = row[column.id]\n                return rowRender(column, value)\n            })}\n        </TRow>)\n}\n\nexport default TableRow","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        maxWidth: '1024px',\n        margin: 'auto',\n        marginTop: '20px'\n        \n    },\n    container: {\n        maxHeight: 590,\n    },\n})\n\nexport default useStyles","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react'\nimport { getUsers } from '../../utils/queries'\nimport { columns } from './config'\nimport TableHead from '../tableHead'\nimport TableRow from '../tableRow'\n\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableContainer,\n} from '@material-ui/core'\nimport useStyles from './styles'\n\n\nconst TableMain = () => {\n    const classes = useStyles()\n\n    const [users, setUsers] = useState([])\n    const [currentPage, setCurrentPage] = useState(0)\n    const [fetching, setFetching] = useState(true)\n\n\n    useEffect(() => {\n        if (fetching) {\n            getUsers(currentPage + 1)\n                .then(response => {\n                    setUsers([...users, ...response.data.data])\n                })\n                .finally(() => setFetching(false))\n        }\n    }, [fetching])\n\n\n\n    const scrollHandler = (id) => {\n        if (id > users.length - 10) {\n            setCurrentPage(prevState => prevState + 1)\n            setFetching(true)\n        }\n    }\n\n    return (\n        <Paper className={classes.root} >\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead columns={columns} />\n                    <TableBody >\n                        {users.map((row, index) => {\n                            return (\n                                <TableRow\n                                    key={index}\n                                    columns={columns}\n                                    row={row}\n                                    scrollhandler={scrollHandler}\n                                />\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper >\n    )\n}\n\nexport default TableMain","import React from 'react'\nimport TableMain from '../src/components/tableMain/index'\n\nconst App = () =>(<TableMain />)\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}