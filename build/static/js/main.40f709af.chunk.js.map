{"version":3,"sources":["components/tableView/styles.js","components/tableView/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","container","maxHeight","TableView","classes","useState","users","setUsers","postID","setPostID","userPosts","setUserPosts","showPosts","setShowPosts","x","y","showPostsPos","setShowPostsPos","currentPage","setCurrentPage","fetching","setFetching","fetchingPost","setFetchingPost","useEffect","axios","get","then","response","data","finally","columns","id","label","minWidth","align","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","style","TableBody","row","hover","role","tabIndex","value","onMouseEnter","e","Math","floor","pageY","getPosts","length","prevState","onMouseLeave","code","position","top","left","Badge","badgeContent","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40f709af.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n    root: {\n        width: '70%',\n        \n    },\n    container: {\n        maxHeight: 590,\n    },\n})\n\nexport default useStyles","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Badge\n} from '@material-ui/core'\nimport MailIcon from '@material-ui/icons/Mail'\nimport useStyles from './styles'\n\n\nconst TableView = () => {\n    const classes = useStyles()\n\n    const [users, setUsers] = useState([])\n    const [postID, setPostID] = useState(0)\n    const [userPosts, setUserPosts] = useState([])\n    const [showPosts, setShowPosts] = useState(false)\n    const [showPostsPos, setShowPostsPos] = useState({ x: 0, y: 0 })\n    const [currentPage, setCurrentPage] = useState(0)\n    const [fetching, setFetching] = useState(true)\n    const [fetchingPost, setFetchingPost] = useState(true)\n\n    useEffect(() => {\n        if (fetching) {\n            axios.get(`https://gorest.co.in/public-api/users?page=${currentPage + 1}`)\n                .then(response => {\n                    setUsers([...users, ...response.data.data])\n                })\n                .finally(() => setFetching(false))\n        }\n    }, [fetching])\n\n    useEffect(() => {\n        if (fetchingPost) {\n            axios.get(`https://gorest.co.in/public-api/posts?user_id=${postID}`)\n                .then(response => {\n                    setUserPosts(response.data.data)\n                })\n                .finally(() => setFetchingPost(false))\n        }\n    }, [fetchingPost])\n\n    const scrollHandler = (id) => {\n        if (id > users.length - 10) {\n            setCurrentPage(prevState => prevState + 1)\n            setFetching(true)\n        }\n    }\n\n    const getPosts = (e, id) => {\n        setPostID(id)\n        setFetchingPost(true)\n        setShowPosts(true)\n\n        setShowPostsPos({ x: 750, y: Math.floor(e.pageY / 53) * 53 + 20 })\n    }\n\n    const columns = [\n        { id: 'name', label: 'Name', minWidth: 170 },\n        { id: 'email', label: 'Email', minWidth: 200 },\n        {\n            id: 'gender',\n            label: 'Gender',\n            minWidth: 100,\n            align: 'right'\n        },\n        {\n            id: 'status',\n            label: 'Status',\n            minWidth: 170,\n            align: 'right'\n        },\n    ]\n\n    return (\n        <Paper className={classes.root} >\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody >\n                        {users.map((row) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                                    {columns.map((column) => {\n                                        const value = row[column.id]\n\n                                        return (\n                                            <TableCell\n                                                key={column.id}\n                                                align={column.align}\n                                                onMouseEnter={(e) => {\n                                                    if (column.id === 'email') {\n                                                        getPosts(e, row.id)\n                                                    }\n                                                    scrollHandler(row.id)\n                                                }}\n                                                onMouseLeave={() => { setShowPosts(false) }}\n                                            >\n                                                {value}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {\n                showPosts &&\n                <div style={{ position: 'absolute', top: showPostsPos.y, left: showPostsPos.x }}>\n                    <Badge\n                        badgeContent={userPosts.length ?? '0'}\n                        color=\"primary\"\n                    >\n                        <MailIcon />\n                    </Badge>\n                </div>\n            }\n        </Paper >\n    )\n}\n\nexport default TableView","import React from 'react'\nimport TableView from '../src/components/tableView/index'\n\nconst App = () =>(<TableView />)\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}